{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/sophia/sophia.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","include","whitespace","comment","doccomment","string"],"mappings":"4FAAA,qFAMO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACrDC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,YACjB,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,YACjB,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,YACjB,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,cAGXC,EAAW,CACpBC,aAAc,GACdC,aAAc,OACdP,SAAU,CAAC,CACTQ,MAAO,kBACPN,KAAM,IACNC,MAAO,KACN,CACDK,MAAO,wBACPN,KAAM,IACNC,MAAO,KACN,CACDK,MAAO,mBACPN,KAAM,IACNC,MAAO,KACN,CACDK,MAAO,kBACPN,KAAM,IACNC,MAAO,MAETM,SAAU,CACV,WAAY,UAAW,aAAc,WAAY,WAAY,QAAS,OAAQ,YAAa,QAAS,OAAQ,UAAW,SAAU,OAAQ,MAAO,SAAU,WAAY,OAAQ,SAAU,SAAU,eAAgB,OAAQ,OAAQ,QAAS,SAAU,SAAU,SAAU,UAAW,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,MAAO,MAAO,UAAW,SAAU,OAAQ,QAAS,MAAO,KAAM,OAAQ,SACxZC,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,QAE9NC,QAAS,wBACTC,QAAS,wEACTC,cAAe,mCACfC,YAAa,UAEbC,UAAW,CACTC,KAAM,CACN,CAAC,eAAgB,CACfC,MAAO,CACL,YAAa,CACXT,MAAO,cAET,WAAY,gBAGhB,CACEU,QAAS,eAEX,CAAC,aAAc,cACf,CAAC,WAAY,WACb,CAAC,SAAU,WACX,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAC3ED,MAAO,CACL,aAAc,YACd,WAAY,MAGhB,CAAC,uCAAwC,gBAAiB,CAAC,yCAA0C,gBAAiB,CAAC,gDAAiD,cAAe,CAAC,gCAAiC,gBAAiB,CAAC,oCAAqC,iBAAkB,CAAC,6BAA8B,UAAW,CAAC,qBAAsB,UACnW,CAAC,QAAS,aACV,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,WACvD,CAAC,WAAY,UAAW,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WAAY,CAAC,IAAK,mBAC3FE,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,eAAgB,cAAe,eAAgB,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,YAC9HC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YAEzEC,WAAY,CAAC,CAAC,UAAW,eAAgB,CAAC,OAAQ,cAAe,QAAS,CAAC,QAAS,gBACpFC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU","file":"62-51d24b00602755f5eed5.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '{',\n    close: '}',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.aes',\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.angle',\n    open: '<',\n    close: '>'\n  }],\n  keywords: [// Main keywords\n  'contract', 'library', 'entrypoint', 'function', 'stateful', 'state', 'hash', 'signature', 'tuple', 'list', 'address', 'string', 'bool', 'int', 'record', 'datatype', 'type', 'option', 'oracle', 'oracle_query', 'Call', 'Bits', 'Bytes', 'Oracle', 'String', 'Crypto', 'Address', 'Auth', 'Chain', 'None', 'Some', 'bits', 'bytes', 'event', 'let', 'map', 'private', 'public', 'true', 'false', 'var', 'if', 'else', 'throw'],\n  operators: ['=', '>', '<', '!', '~', '?', '::', ':', '==', '<=', '>=', '!=', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // [[ attributes ]].\n    [/\\[\\[.*\\]\\]/, 'annotation'], // Preprocessor directive\n    [/^\\s*#\\w+/, 'keyword'], //DataTypes\n    [/int\\d*/, 'keyword'], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'], [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'], [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'], [/\\d[\\d']*\\d(@integersuffix)/, 'number'], [/\\d(@integersuffix)/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']]\n  }\n};"],"sourceRoot":""}