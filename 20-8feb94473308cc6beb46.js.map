{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/clojure/clojure.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","ignoreCase","tokenPostfix","token","constants","numbers","characters","escapes","qualifiedSymbols","specialForms","coreSymbols","tokenizer","root","include","cases","whitespace","comment","string","multiLineString"],"mappings":"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","file":"20-8feb94473308cc6beb46.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: ';;'\n  },\n  brackets: [['[', ']'], ['(', ')'], ['{', '}']],\n  autoClosingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '{',\n    close: '}'\n  }],\n  surroundingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '{',\n    close: '}'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  ignoreCase: true,\n  tokenPostfix: '.clj',\n  brackets: [{\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }],\n  constants: ['true', 'false', 'nil'],\n  // delimiters: /[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$/,\n  numbers: /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/,\n  characters: /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  escapes: /^\\\\(?:[\"'\\\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*/\n  // simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n  // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n  qualifiedSymbols: /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n  specialForms: ['.', 'catch', 'def', 'do', 'if', 'monitor-enter', 'monitor-exit', 'new', 'quote', 'recur', 'set!', 'throw', 'try', 'var'],\n  coreSymbols: ['*', '*\\'', '*1', '*2', '*3', '*agent*', '*allow-unresolved-vars*', '*assert*', '*clojure-version*', '*command-line-args*', '*compile-files*', '*compile-path*', '*compiler-options*', '*data-readers*', '*default-data-reader-fn*', '*e', '*err*', '*file*', '*flush-on-newline*', '*fn-loader*', '*in*', '*math-context*', '*ns*', '*out*', '*print-dup*', '*print-length*', '*print-level*', '*print-meta*', '*print-namespace-maps*', '*print-readably*', '*read-eval*', '*reader-resolver*', '*source-path*', '*suppress-read*', '*unchecked-math*', '*use-context-classloader*', '*verbose-defrecords*', '*warn-on-reflection*', '+', '+\\'', '-', '-\\'', '->', '->>', '->ArrayChunk', '->Eduction', '->Vec', '->VecNode', '->VecSeq', '-cache-protocol-fn', '-reset-methods', '..', '/', '<', '<=', '=', '==', '>', '>=', 'EMPTY-NODE', 'Inst', 'StackTraceElement->vec', 'Throwable->map', 'accessor', 'aclone', 'add-classpath', 'add-watch', 'agent', 'agent-error', 'agent-errors', 'aget', 'alength', 'alias', 'all-ns', 'alter', 'alter-meta!', 'alter-var-root', 'amap', 'ancestors', 'and', 'any?', 'apply', 'areduce', 'array-map', 'as->', 'aset', 'aset-boolean', 'aset-byte', 'aset-char', 'aset-double', 'aset-float', 'aset-int', 'aset-long', 'aset-short', 'assert', 'assoc', 'assoc!', 'assoc-in', 'associative?', 'atom', 'await', 'await-for', 'await1', 'bases', 'bean', 'bigdec', 'bigint', 'biginteger', 'binding', 'bit-and', 'bit-and-not', 'bit-clear', 'bit-flip', 'bit-not', 'bit-or', 'bit-set', 'bit-shift-left', 'bit-shift-right', 'bit-test', 'bit-xor', 'boolean', 'boolean-array', 'boolean?', 'booleans', 'bound-fn', 'bound-fn*', 'bound?', 'bounded-count', 'butlast', 'byte', 'byte-array', 'bytes', 'bytes?', 'case', 'cast', 'cat', 'char', 'char-array', 'char-escape-string', 'char-name-string', 'char?', 'chars', 'chunk', 'chunk-append', 'chunk-buffer', 'chunk-cons', 'chunk-first', 'chunk-next', 'chunk-rest', 'chunked-seq?', 'class', 'class?', 'clear-agent-errors', 'clojure-version', 'coll?', 'comment', 'commute', 'comp', 'comparator', 'compare', 'compare-and-set!', 'compile', 'complement', 'completing', 'concat', 'cond', 'cond->', 'cond->>', 'condp', 'conj', 'conj!', 'cons', 'constantly', 'construct-proxy', 'contains?', 'count', 'counted?', 'create-ns', 'create-struct', 'cycle', 'dec', 'dec\\'', 'decimal?', 'declare', 'dedupe', 'default-data-readers', 'definline', 'definterface', 'defmacro', 'defmethod', 'defmulti', 'defn', 'defn-', 'defonce', 'defprotocol', 'defrecord', 'defstruct', 'deftype', 'delay', 'delay?', 'deliver', 'denominator', 'deref', 'derive', 'descendants', 'destructure', 'disj', 'disj!', 'dissoc', 'dissoc!', 'distinct', 'distinct?', 'doall', 'dorun', 'doseq', 'dosync', 'dotimes', 'doto', 'double', 'double-array', 'double?', 'doubles', 'drop', 'drop-last', 'drop-while', 'eduction', 'empty', 'empty?', 'ensure', 'ensure-reduced', 'enumeration-seq', 'error-handler', 'error-mode', 'eval', 'even?', 'every-pred', 'every?', 'ex-data', 'ex-info', 'extend', 'extend-protocol', 'extend-type', 'extenders', 'extends?', 'false?', 'ffirst', 'file-seq', 'filter', 'filterv', 'find', 'find-keyword', 'find-ns', 'find-protocol-impl', 'find-protocol-method', 'find-var', 'first', 'flatten', 'float', 'float-array', 'float?', 'floats', 'flush', 'fn', 'fn?', 'fnext', 'fnil', 'for', 'force', 'format', 'frequencies', 'future', 'future-call', 'future-cancel', 'future-cancelled?', 'future-done?', 'future?', 'gen-class', 'gen-interface', 'gensym', 'get', 'get-in', 'get-method', 'get-proxy-class', 'get-thread-bindings', 'get-validator', 'group-by', 'halt-when', 'hash', 'hash-combine', 'hash-map', 'hash-ordered-coll', 'hash-set', 'hash-unordered-coll', 'ident?', 'identical?', 'identity', 'if-let', 'if-not', 'if-some', 'ifn?', 'import', 'in-ns', 'inc', 'inc\\'', 'indexed?', 'init-proxy', 'inst-ms', 'inst-ms*', 'inst?', 'instance?', 'int', 'int-array', 'int?', 'integer?', 'interleave', 'intern', 'interpose', 'into', 'into-array', 'ints', 'io!', 'isa?', 'iterate', 'iterator-seq', 'juxt', 'keep', 'keep-indexed', 'key', 'keys', 'keyword', 'keyword?', 'last', 'lazy-cat', 'lazy-seq', 'let', 'letfn', 'line-seq', 'list', 'list*', 'list?', 'load', 'load-file', 'load-reader', 'load-string', 'loaded-libs', 'locking', 'long', 'long-array', 'longs', 'loop', 'macroexpand', 'macroexpand-1', 'make-array', 'make-hierarchy', 'map', 'map-entry?', 'map-indexed', 'map?', 'mapcat', 'mapv', 'max', 'max-key', 'memfn', 'memoize', 'merge', 'merge-with', 'meta', 'method-sig', 'methods', 'min', 'min-key', 'mix-collection-hash', 'mod', 'munge', 'name', 'namespace', 'namespace-munge', 'nat-int?', 'neg-int?', 'neg?', 'newline', 'next', 'nfirst', 'nil?', 'nnext', 'not', 'not-any?', 'not-empty', 'not-every?', 'not=', 'ns', 'ns-aliases', 'ns-imports', 'ns-interns', 'ns-map', 'ns-name', 'ns-publics', 'ns-refers', 'ns-resolve', 'ns-unalias', 'ns-unmap', 'nth', 'nthnext', 'nthrest', 'num', 'number?', 'numerator', 'object-array', 'odd?', 'or', 'parents', 'partial', 'partition', 'partition-all', 'partition-by', 'pcalls', 'peek', 'persistent!', 'pmap', 'pop', 'pop!', 'pop-thread-bindings', 'pos-int?', 'pos?', 'pr', 'pr-str', 'prefer-method', 'prefers', 'primitives-classnames', 'print', 'print-ctor', 'print-dup', 'print-method', 'print-simple', 'print-str', 'printf', 'println', 'println-str', 'prn', 'prn-str', 'promise', 'proxy', 'proxy-call-with-super', 'proxy-mappings', 'proxy-name', 'proxy-super', 'push-thread-bindings', 'pvalues', 'qualified-ident?', 'qualified-keyword?', 'qualified-symbol?', 'quot', 'rand', 'rand-int', 'rand-nth', 'random-sample', 'range', 'ratio?', 'rational?', 'rationalize', 're-find', 're-groups', 're-matcher', 're-matches', 're-pattern', 're-seq', 'read', 'read-line', 'read-string', 'reader-conditional', 'reader-conditional?', 'realized?', 'record?', 'reduce', 'reduce-kv', 'reduced', 'reduced?', 'reductions', 'ref', 'ref-history-count', 'ref-max-history', 'ref-min-history', 'ref-set', 'refer', 'refer-clojure', 'reify', 'release-pending-sends', 'rem', 'remove', 'remove-all-methods', 'remove-method', 'remove-ns', 'remove-watch', 'repeat', 'repeatedly', 'replace', 'replicate', 'require', 'reset!', 'reset-meta!', 'reset-vals!', 'resolve', 'rest', 'restart-agent', 'resultset-seq', 'reverse', 'reversible?', 'rseq', 'rsubseq', 'run!', 'satisfies?', 'second', 'select-keys', 'send', 'send-off', 'send-via', 'seq', 'seq?', 'seqable?', 'seque', 'sequence', 'sequential?', 'set', 'set-agent-send-executor!', 'set-agent-send-off-executor!', 'set-error-handler!', 'set-error-mode!', 'set-validator!', 'set?', 'short', 'short-array', 'shorts', 'shuffle', 'shutdown-agents', 'simple-ident?', 'simple-keyword?', 'simple-symbol?', 'slurp', 'some', 'some->', 'some->>', 'some-fn', 'some?', 'sort', 'sort-by', 'sorted-map', 'sorted-map-by', 'sorted-set', 'sorted-set-by', 'sorted?', 'special-symbol?', 'spit', 'split-at', 'split-with', 'str', 'string?', 'struct', 'struct-map', 'subs', 'subseq', 'subvec', 'supers', 'swap!', 'swap-vals!', 'symbol', 'symbol?', 'sync', 'tagged-literal', 'tagged-literal?', 'take', 'take-last', 'take-nth', 'take-while', 'test', 'the-ns', 'thread-bound?', 'time', 'to-array', 'to-array-2d', 'trampoline', 'transduce', 'transient', 'tree-seq', 'true?', 'type', 'unchecked-add', 'unchecked-add-int', 'unchecked-byte', 'unchecked-char', 'unchecked-dec', 'unchecked-dec-int', 'unchecked-divide-int', 'unchecked-double', 'unchecked-float', 'unchecked-inc', 'unchecked-inc-int', 'unchecked-int', 'unchecked-long', 'unchecked-multiply', 'unchecked-multiply-int', 'unchecked-negate', 'unchecked-negate-int', 'unchecked-remainder-int', 'unchecked-short', 'unchecked-subtract', 'unchecked-subtract-int', 'underive', 'unquote', 'unquote-splicing', 'unreduced', 'unsigned-bit-shift-right', 'update', 'update-in', 'update-proxy', 'uri?', 'use', 'uuid?', 'val', 'vals', 'var-get', 'var-set', 'var?', 'vary-meta', 'vec', 'vector', 'vector-of', 'vector?', 'volatile!', 'volatile?', 'vreset!', 'vswap!', 'when', 'when-first', 'when-let', 'when-not', 'when-some', 'while', 'with-bindings', 'with-bindings*', 'with-in-str', 'with-loading-context', 'with-local-vars', 'with-meta', 'with-open', 'with-out-str', 'with-precision', 'with-redefs', 'with-redefs-fn', 'xml-seq', 'zero?', 'zipmap'],\n  tokenizer: {\n    root: [// whitespaces and comments\n    {\n      include: '@whitespace'\n    }, // numbers\n    [/@numbers/, 'number'], // characters\n    [/@characters/, 'string'], // strings\n    {\n      include: '@string'\n    }, // brackets\n    [/[()\\[\\]{}]/, '@brackets'], // regular expressions\n    [/\\/#\"(?:\\.|(?:\")|[^\"\\n])*\"\\/g/, 'regexp'], // reader macro characters\n    [/[#'@^`~]/, 'meta'], // symbols\n    [/@qualifiedSymbols/, {\n      cases: {\n        '^:.+$': 'constant',\n        '@specialForms': 'keyword',\n        '@coreSymbols': 'keyword',\n        '@constants': 'constant',\n        '@default': 'identifier'\n      }\n    }]],\n    whitespace: [[/[\\s,]+/, 'white'], [/;.*$/, 'comment'], [/\\(comment\\b/, 'comment', '@comment']],\n    comment: [[/\\(/, 'comment', '@push'], [/\\)/, 'comment', '@pop'], [/[^()]/, 'comment']],\n    string: [[/\"/, 'string', '@multiLineString']],\n    multiLineString: [[/\"/, 'string', '@popall'], [/@escapes/, 'string.escape'], [/./, 'string']]\n  }\n};"],"sourceRoot":""}