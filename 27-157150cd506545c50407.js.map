{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/go/go.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","tokenizer","root","cases","token","include","whitespace","comment","doccomment","string","rawstring"],"mappings":"4FAAA,qFAMO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,WACP,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,WACP,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,aAEpBC,iBAAkB,CAAC,CACjBH,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,OAGAG,EAAW,CACpBC,aAAc,GACdC,aAAc,MACdC,SAAU,CAAC,QAAS,OAAQ,OAAQ,QAAS,WAAY,UAAW,QAAS,OAAQ,cAAe,MAAO,OAAQ,KAAM,OAAQ,KAAM,SAAU,YAAa,MAAO,UAAW,QAAS,SAAU,SAAU,SAAU,SAAU,OAAQ,MAAO,OAAQ,OAAQ,QAAS,QAAS,SAAU,SAAU,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,YAAa,aAAc,OAAQ,OAAQ,OAAQ,MAAO,UAAW,SAAU,OACxbC,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAAO,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE9QC,QAAS,wBACTC,QAAS,wEAETC,UAAW,CACTC,KAAM,CACN,CAAC,eAAgB,CACfC,MAAO,CACL,YAAa,CACXC,MAAO,cAET,WAAY,gBAGhB,CACEC,QAAS,eAEX,CAAC,aAAc,cACf,CAAC,WAAY,WACb,CAAC,aAAc,aAAc,CAAC,mBAAoB,aAAc,CAAC,WAAY,CAC3EF,MAAO,CACL,aAAc,YACd,WAAY,MAGhB,CAAC,yBAA0B,gBAAiB,CAAC,2BAA4B,gBAAiB,CAAC,gCAAiC,cAAe,CAAC,gBAAiB,gBAAiB,CAAC,oBAAqB,iBAAkB,CAAC,WAAY,UAAW,CAAC,KAAM,UACrP,CAAC,QAAS,aACV,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,WAAY,CAAC,IAAK,SAAU,cACnF,CAAC,WAAY,UAAW,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WAAY,CAAC,IAAK,mBAC3FG,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,eAAgB,cAAe,eAAgB,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,YAC9HC,QAAS,CAAC,CAAC,UAAW,WAEtB,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YAEvCC,WAAY,CAAC,CAAC,UAAW,eACzB,CAAC,OAAQ,uBAAwB,CAAC,OAAQ,cAAe,QAAS,CAAC,QAAS,gBAC5EC,OAAQ,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SACjHC,UAAW,CAAC,CAAC,QAAS,UAAW,CAAC,IAAK,SAAU","file":"27-157150cd506545c50407.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '`',\n    close: '`'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.go',\n  keywords: ['break', 'case', 'chan', 'const', 'continue', 'default', 'defer', 'else', 'fallthrough', 'for', 'func', 'go', 'goto', 'if', 'import', 'interface', 'map', 'package', 'range', 'return', 'select', 'struct', 'switch', 'type', 'var', 'bool', 'true', 'false', 'uint8', 'uint16', 'uint32', 'uint64', 'int8', 'int16', 'int32', 'int64', 'float32', 'float64', 'complex64', 'complex128', 'byte', 'rune', 'uint', 'int', 'uintptr', 'string', 'nil'],\n  operators: ['+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^', '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=', '&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...', '(', ')', '', ']', '{', '}', ',', ';', '.', ':'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // [[ attributes ]].\n    [/\\[\\[.*\\]\\]/, 'annotation'], // Preprocessor directive\n    [/^\\s*#\\w+/, 'keyword'], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'], [/0[0-7']*[0-7]/, 'number.octal'], [/0[bB][0-1']*[0-1]/, 'number.binary'], [/\\d[\\d']*/, 'number'], [/\\d/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string'], [/`/, \"string\", \"@rawstring\"], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n    // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n    [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [[/[^\\/*]+/, 'comment.doc'], // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n    [/\\/\\*/, 'comment.doc.invalid'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    rawstring: [[/[^\\`]/, \"string\"], [/`/, \"string\", \"@pop\"]]\n  }\n};"],"sourceRoot":""}