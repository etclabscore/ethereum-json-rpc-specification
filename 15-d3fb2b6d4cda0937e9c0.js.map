{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js","webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"names":["conf","monaco","self","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","_monaco","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting"],"mappings":"iGAAA,qGAUWA,GAFqB,oBAAXC,OAAyBC,KAAKD,OAASA,OAE1C,QACPE,EAAW,CAEpBC,aAAc,UACdC,aAAc,MACdC,SAAU,CAAC,QAAS,OAAQ,QAAS,QAAS,WAAY,QAAS,cAAe,WAAY,UAAW,SAAU,KAAM,OAAQ,SAAU,UAAW,QAAS,UAAW,MAAO,OAAQ,WAAY,MAAO,KAAM,SAAU,KAAM,aAAc,MAAO,MAAO,OAAQ,SAAU,MAAO,QAAS,SAAU,SAAU,OAAQ,QAAS,OAAQ,MAAO,SAAU,YAAa,MAAO,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,MACtaC,aAAc,GACdC,UAAW,WAAWA,UACtBC,QAAS,WAAWA,QACpBC,QAAS,WAAWA,QACpBC,OAAQ,WAAWA,OACnBC,YAAa,WAAWA,YACxBC,aAAc,WAAWA,aACzBC,UAAW,WAAWA,UACtBC,UAAW,WAAWA,UACtBC,UAAW,WAAWA,UACtBC,UAAW,WAAWA,Y,oCC1BxB,qFAMA,IAAIC,EAA4B,oBAAXjB,OAAyBC,KAAKD,OAASA,OAEjDD,EAAO,CAChBmB,YAAa,uFACbC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,aAAc,CAAC,CAEbC,WAAY,qCACZC,UAAW,YACXC,OAAQ,CACNC,aAAcV,EAAQW,UAAUC,aAAaC,cAC7CC,WAAY,QAEb,CAEDP,WAAY,qCACZE,OAAQ,CACNC,aAAcV,EAAQW,UAAUC,aAAaG,KAC7CD,WAAY,QAEb,CAEDP,WAAY,2CACZE,OAAQ,CACNC,aAAcV,EAAQW,UAAUC,aAAaG,KAC7CD,WAAY,OAEb,CAEDP,WAAY,0BACZE,OAAQ,CACNC,aAAcV,EAAQW,UAAUC,aAAaG,KAC7CC,WAAY,KAGhBC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,WACP,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,YACjB,CACDF,KAAM,IACNC,MAAO,IACPC,MAAO,CAAC,SAAU,YACjB,CACDF,KAAM,MACNC,MAAO,MACPC,MAAO,CAAC,YAEVC,QAAS,CACPC,QAAS,CACPC,MAAO,IAAIC,OAAO,0BAClBC,IAAK,IAAID,OAAO,gCAIXvC,EAAW,CAEpBC,aAAc,UACdC,aAAc,MACdC,SAAU,CAAC,WAAY,KAAM,QAAS,OAAQ,QAAS,QAAS,WAAY,QAAS,cAAe,WAAY,UAAW,UAAW,SAAU,KAAM,OAAQ,OAAQ,SAAU,UAAW,QAAS,UAAW,MAAO,OAAQ,WAAY,MAAO,KAAM,aAAc,SAAU,KAAM,QAAS,aAAc,YAAa,KAAM,QAAS,MAAO,SAAU,YAAa,QAAS,MAAO,OAAQ,UAAW,UAAW,YAAa,SAAU,WAAY,UAAW,SAAU,SAAU,MAAO,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,OAAQ,MAAO,OAAQ,SAAU,SAAU,MAAO,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,MAC3nBC,aAAc,CAAC,MAAO,UAAW,SAAU,SAAU,SAAU,aAC/DC,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,OAAQ,KAAM,KAAM,KAAM,KAE7PC,QAAS,wBACTC,QAAS,wEACTC,OAAQ,cACRC,YAAa,oBACbC,aAAc,oBACdC,UAAW,iCACXC,UAAW,yBACXC,UAAW,+EAEXC,UAAW,CACT2B,KAAM,CAAC,CAAC,OAAQ,qBAAsB,CACpCC,QAAS,WAEXC,OAAQ,CACR,CAAC,gBAAiB,CAChBC,MAAO,CACL,gBAAiB,UACjB,YAAa,UACb,WAAY,gBAEZ,CAAC,eAAgB,mBAErB,CACEF,QAAS,eAEX,CAAC,+DAAgE,CAC/DG,MAAO,SACPC,QAAS,QACTC,KAAM,YAER,CAAC,WAAY,aAAc,CAAC,mBAAoB,aAAc,CAAC,gBAAiB,aAAc,CAAC,WAAY,CACzGH,MAAO,CACL,aAAc,YACd,WAAY,MAGhB,CAAC,kCAAmC,gBAAiB,CAAC,6CAA8C,gBAAiB,CAAC,sBAAuB,cAAe,CAAC,yBAA0B,gBAAiB,CAAC,yBAA0B,iBAAkB,CAAC,cAAe,UACrQ,CAAC,QAAS,aACV,CAAC,kBAAmB,kBAAmB,CAAC,kBAAmB,kBAAmB,CAAC,IAAK,SAAU,kBAAmB,CAAC,IAAK,SAAU,kBAAmB,CAAC,IAAK,SAAU,qBACpKI,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,eAAgB,cAAe,UAAW,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,YACzHC,QAAS,CAAC,CAAC,UAAW,WAAY,CAAC,OAAQ,UAAW,QAAS,CAAC,QAAS,YACzEC,MAAO,CAAC,CAAC,UAAW,eAAgB,CAAC,OAAQ,cAAe,QAAS,CAAC,QAAS,gBAE/EC,OAAQ,CAAC,CAAC,yBAA0B,CAAC,wBAAyB,wBAAyB,0BAA2B,CAAC,kCAAmC,CAAC,wBAAyB,CAC9KN,MAAO,wBACPE,KAAM,iBACH,CAAC,oBAAqB,CAAC,wBAAyB,0BAA2B,CAAC,OAAQ,yBAA0B,CAAC,aAAc,yBAA0B,CAAC,UAAW,UAAW,CAAC,aAAc,iBAAkB,CAAC,OAAQ,kBAAmB,CAAC,kBAAmB,CAAC,CACnQF,MAAO,SACPC,QAAS,SACTC,KAAM,QACL,mBACHK,WAAY,CAAC,CAAC,IAAK,yBAA0B,CAAC,KAAM,kBAAmB,CAAC,aAAc,iBAAkB,CAAC,QAAS,UAAW,CAAC,KAAM,CAClIP,MAAO,wBACPE,KAAM,OACND,QAAS,YAEXO,cAAe,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SACxHC,cAAe,CAAC,CAAC,UAAW,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SACxHC,gBAAiB,CAAC,CAAC,OAAQ,CACzBV,MAAO,oBACPE,KAAM,qBACJ,CAAC,WAAY,UAAW,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAAC,IAAK,SAAU,SAC7GS,gBAAiB,CAAC,CAAC,KAAM,oBAAqB,oBAAqB,CAAC,KAAM,oBAAqB,QAAS,CACtGd,QAAS","file":"15-d3fb2b6d4cda0937e9c0.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nexport var conf = tsConf;\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.js',\n  keywords: ['break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null', 'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: [],\n  operators: tsLanguage.operators,\n  symbols: tsLanguage.symbols,\n  escapes: tsLanguage.escapes,\n  digits: tsLanguage.digits,\n  octaldigits: tsLanguage.octaldigits,\n  binarydigits: tsLanguage.binarydigits,\n  hexdigits: tsLanguage.hexdigits,\n  regexpctl: tsLanguage.regexpctl,\n  regexpesc: tsLanguage.regexpesc,\n  tokenizer: tsLanguage.tokenizer\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  onEnterRules: [{\n    // e.g. /** | */\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    afterText: /^\\s*\\*\\/$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.IndentOutdent,\n      appendText: ' * '\n    }\n  }, {\n    // e.g. /** ...|\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: ' * '\n    }\n  }, {\n    // e.g.  * ...|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: '* '\n    }\n  }, {\n    // e.g.  */|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      removeText: 1\n    }\n  }],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.ts',\n  keywords: ['abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface', 'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package', 'private', 'protected', 'public', 'readonly', 'require', 'global', 'return', 'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: ['any', 'boolean', 'number', 'object', 'string', 'undefined'],\n  operators: ['<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**', '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', '@'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@typeKeywords': 'keyword',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[A-Z][\\w\\$]*/, 'type.identifier'], // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    }, // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|\\/|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }], // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single'], [/`/, 'string', '@string_backtick']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([gimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    string_single: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']],\n    string_backtick: [[/\\$\\{/, {\n      token: 'delimiter.bracket',\n      next: '@bracketCounting'\n    }], [/[^\\\\`$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/`/, 'string', '@pop']],\n    bracketCounting: [[/\\{/, 'delimiter.bracket', '@bracketCounting'], [/\\}/, 'delimiter.bracket', '@pop'], {\n      include: 'common'\n    }]\n  }\n};"],"sourceRoot":""}