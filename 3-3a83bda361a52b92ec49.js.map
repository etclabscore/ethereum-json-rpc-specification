{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","encoding","tokenizer","root","next","cases","include","whitespace","comment","doccomment","string","raw"],"mappings":"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","file":"3-3a83bda361a52b92ec49.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.cpp',\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.angle',\n    open: '<',\n    close: '>'\n  }],\n  keywords: ['abstract', 'amp', 'array', 'auto', 'bool', 'break', 'case', 'catch', 'char', 'class', 'const', 'constexpr', 'const_cast', 'continue', 'cpu', 'decltype', 'default', 'delegate', 'delete', 'do', 'double', 'dynamic_cast', 'each', 'else', 'enum', 'event', 'explicit', 'export', 'extern', 'false', 'final', 'finally', 'float', 'for', 'friend', 'gcnew', 'generic', 'goto', 'if', 'in', 'initonly', 'inline', 'int', 'interface', 'interior_ptr', 'internal', 'literal', 'long', 'mutable', 'namespace', 'new', 'noexcept', 'nullptr', '__nullptr', 'operator', 'override', 'partial', 'pascal', 'pin_ptr', 'private', 'property', 'protected', 'public', 'ref', 'register', 'reinterpret_cast', 'restrict', 'return', 'safe_cast', 'sealed', 'short', 'signed', 'sizeof', 'static', 'static_assert', 'static_cast', 'struct', 'switch', 'template', 'this', 'thread_local', 'throw', 'tile_static', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'where', 'while', '_asm', '_based', '_cdecl', '_declspec', '_fastcall', '_if_exists', '_if_not_exists', '_inline', '_multiple_inheritance', '_pascal', '_single_inheritance', '_stdcall', '_virtual_inheritance', '_w64', '__abstract', '__alignof', '__asm', '__assume', '__based', '__box', '__builtin_alignof', '__cdecl', '__clrcall', '__declspec', '__delegate', '__event', '__except', '__fastcall', '__finally', '__forceinline', '__gc', '__hook', '__identifier', '__if_exists', '__if_not_exists', '__inline', '__int128', '__int16', '__int32', '__int64', '__int8', '__interface', '__leave', '__m128', '__m128d', '__m128i', '__m256', '__m256d', '__m256i', '__m64', '__multiple_inheritance', '__newslot', '__nogc', '__noop', '__nounwind', '__novtordisp', '__pascal', '__pin', '__pragma', '__property', '__ptr32', '__ptr64', '__raise', '__restrict', '__resume', '__sealed', '__single_inheritance', '__stdcall', '__super', '__thiscall', '__try', '__try_cast', '__typeof', '__unaligned', '__unhook', '__uuidof', '__value', '__virtual_inheritance', '__w64', '__wchar_t'],\n  operators: ['=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// C++ 11 Raw String\n    [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, {\n      token: 'string.raw.begin',\n      next: '@raw.$1'\n    }], // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // [[ attributes ]].\n    [/\\[\\[.*\\]\\]/, 'annotation'], [/^\\s*#include/, {\n      token: 'keyword.directive.include',\n      next: '@include'\n    }], // Preprocessor directive\n    [/^\\s*#\\s*\\w+/, 'keyword'], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'], [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'], [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'], [/\\d[\\d']*\\d(@integersuffix)/, 'number'], [/\\d(@integersuffix)/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    raw: [[/(.*)(\\))(?:([^ ()\\\\\\t]*))(\\\")/, {\n      cases: {\n        '$3==$S2': ['string.raw', 'string.raw.end', 'string.raw.end', {\n          token: 'string.raw.end',\n          next: '@pop'\n        }],\n        '@default': ['string.raw', 'string.raw', 'string.raw', 'string.raw']\n      }\n    }], [/.*/, 'string.raw']],\n    include: [[/(\\s*)(<)([^<>]*)(>)/, ['', 'keyword.directive.include.begin', 'string.include.identifier', {\n      token: 'keyword.directive.include.end',\n      next: '@pop'\n    }]], [/(\\s*)(\")([^\"]*)(\")/, ['', 'keyword.directive.include.begin', 'string.include.identifier', {\n      token: 'keyword.directive.include.end',\n      next: '@pop'\n    }]]]\n  }\n};"],"sourceRoot":""}