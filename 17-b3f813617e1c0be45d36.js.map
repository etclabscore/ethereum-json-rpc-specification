{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/apex/apex.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","keywordsWithCaseVariations","forEach","lowercase","push","toUpperCase","charAt","substr","uppercaseFirstLetter","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","apexdoc","string","next"],"mappings":"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","file":"17-b3f813617e1c0be45d36.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '<',\n    close: '>'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n    }\n  }\n};\nvar keywords = ['abstract', 'activate', 'and', 'any', 'array', 'as', 'asc', 'assert', 'autonomous', 'begin', 'bigdecimal', 'blob', 'boolean', 'break', 'bulk', 'by', 'case', 'cast', 'catch', 'char', 'class', 'collect', 'commit', 'const', 'continue', 'convertcurrency', 'decimal', 'default', 'delete', 'desc', 'do', 'double', 'else', 'end', 'enum', 'exception', 'exit', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'from', 'future', 'get', 'global', 'goto', 'group', 'having', 'hint', 'if', 'implements', 'import', 'in', 'inner', 'insert', 'instanceof', 'int', 'interface', 'into', 'join', 'last_90_days', 'last_month', 'last_n_days', 'last_week', 'like', 'limit', 'list', 'long', 'loop', 'map', 'merge', 'native', 'new', 'next_90_days', 'next_month', 'next_n_days', 'next_week', 'not', 'null', 'nulls', 'number', 'object', 'of', 'on', 'or', 'outer', 'override', 'package', 'parallel', 'pragma', 'private', 'protected', 'public', 'retrieve', 'return', 'returning', 'rollback', 'savepoint', 'search', 'select', 'set', 'short', 'sort', 'stat', 'static', 'strictfp', 'super', 'switch', 'synchronized', 'system', 'testmethod', 'then', 'this', 'this_month', 'this_week', 'throw', 'throws', 'today', 'tolabel', 'tomorrow', 'transaction', 'transient', 'trigger', 'true', 'try', 'type', 'undelete', 'update', 'upsert', 'using', 'virtual', 'void', 'volatile', 'webservice', 'when', 'where', 'while', 'yesterday']; // create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive\n// because we use a heuristic to assume that identifiers starting with an upper case letter are types.\n\nvar uppercaseFirstLetter = function uppercaseFirstLetter(lowercase) {\n  return lowercase.charAt(0).toUpperCase() + lowercase.substr(1);\n};\n\nvar keywordsWithCaseVariations = [];\nkeywords.forEach(function (lowercase) {\n  keywordsWithCaseVariations.push(lowercase);\n  keywordsWithCaseVariations.push(lowercase.toUpperCase());\n  keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));\n});\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.apex',\n  keywords: keywordsWithCaseVariations,\n  operators: ['=', '>', '<', '!', '~', '?', ':', '==', '<=', '>=', '!=', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>='],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // assume that identifiers starting with an uppercase letter are types\n    [/[A-Z][\\w\\$]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'type.identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // @ annotations.\n    [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'], [/(@digits)[fFdD]/, 'number.float'], [/(@digits)[lL]?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\''], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@apexdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n    // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n    [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    //Identical copy of comment above, except for the addition of .doc\n    apexdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    string: [[/[^\\\\\"']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]]\n  }\n};"],"sourceRoot":""}