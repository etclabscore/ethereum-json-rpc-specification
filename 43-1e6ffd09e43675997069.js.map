{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","token","keywords","builtinFunctions","builtinFileHandlers","builtinVariables","symbols","quoteLikeOps","escapes","tokenizer","root","include","cases","next","whitespace","numbers","strings","stringBody","dblStrings","dblStringBody","quotedConstructs","switchTo","qstring","qregexp","regexpModifiers","qqstring","heredoc","heredocBody","perldoc","perldocBody","variables"],"mappings":"4FAAA,qFAMO,IAAIA,EAAO,CAChBC,SAAU,CACRC,YAAa,KAEfC,SAAU,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MACzCC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,OAGAE,EAAW,CACpBC,aAAc,GACdC,aAAc,QACdP,SAAU,CAAC,CACTQ,MAAO,oBACPN,KAAM,IACNC,MAAO,KACN,CACDK,MAAO,wBACPN,KAAM,IACNC,MAAO,KACN,CACDK,MAAO,mBACPN,KAAM,IACNC,MAAO,MAITM,SAAU,CAAC,WAAY,OAAQ,OAAQ,UAAW,QAAS,KAAM,WAAY,KAAM,WAAY,MAAO,KAAM,MAAO,cAAe,MAAO,KAAM,MAAO,UAAW,KAAM,SAAU,MAAO,KAAM,UAAW,QAAS,WAAY,KAAM,QAAS,OAAQ,KAAM,MAAO,KAAM,KAAM,UAAW,YAEzRC,iBAAkB,CAAC,KAAM,MAAO,SAAU,UAAW,KAAM,WAAY,OAAQ,cAAe,KAAM,aAAc,SAAU,cAAe,KAAM,YAAa,QAAS,WAAY,KAAM,cAAe,YAAa,aAAc,KAAM,WAAY,MAAO,aAAc,KAAM,aAAc,QAAS,QAAS,KAAM,MAAO,MAAO,SAAU,KAAM,OAAQ,QAAS,SAAU,KAAM,OAAQ,SAAU,UAAW,KAAM,SAAU,SAAU,WAAY,KAAM,OAAQ,SAAU,WAAY,KAAM,QAAS,SAAU,MAAO,KAAM,SAAU,KAAM,QAAS,KAAM,QAAS,OAAQ,SAAU,KAAM,OAAQ,MAAO,aAAc,KAAM,SAAU,MAAO,OAAQ,KAAM,WAAY,OAAQ,SAAU,KAAM,OAAQ,UAAW,QAAS,KAAM,WAAY,MAAO,UAAW,KAAM,WAAY,MAAO,OAAQ,KAAM,WAAY,OAAQ,QAAS,KAAM,gBAAiB,OAAQ,OAAQ,KAAM,gBAAiB,MAAO,QAAS,KAAM,aAAc,MAAO,QAAS,KAAM,WAAY,QAAS,SAAU,KAAM,eAAgB,SAAU,UAAW,MAAO,eAAgB,YAAa,UAAW,SAAU,YAAa,OAAQ,UAAW,QAAS,cAAe,YAAa,UAAW,QAAS,UAAW,OAAQ,UAAW,WAAY,UAAW,OAAQ,SAAU,QAAS,cAAe,UAAW,WAAY,OAAQ,iBAAkB,WAAY,OAAQ,UAAW,mBAAoB,WAAY,UAAW,QAAS,cAAe,WAAY,MAAO,QAAS,WAAY,OAAQ,OAAQ,SAAU,WAAY,OAAQ,OAAQ,QAAS,WAAY,MAAO,QAAS,QAAS,gBAAiB,SAAU,WAAY,QAAS,gBAAiB,UAAW,KAAM,QAAS,aAAc,QAAS,UAAW,OAAQ,cAAe,SAAU,QAAS,QAAS,aAAc,UAAW,QAAS,MAAO,OAAQ,YAAa,YAAa,SAAU,SAAU,SAAU,SAAU,QAAS,OAAQ,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,UAAW,MAAO,SAAU,QAAS,MAAO,QAAS,OAAQ,MAAO,QAAS,OAAQ,UAAW,QAAS,WAAY,MAAO,SAAU,SAAU,UAAW,QAAS,SAAU,MAAO,UAAW,OAAQ,SAAU,OAAQ,SAAU,OAAQ,QAAS,UAAW,UAAW,OAAQ,OAAQ,YAAa,MAAO,OAAQ,WAAY,OAAQ,OAAQ,KAAM,aAAc,QAAS,OAAQ,UAAW,aAE9uEC,oBAAqB,CAAC,OAAQ,SAAU,SAAU,UAAW,QAAS,OAEtEC,iBAAkB,CAAC,KAAM,mBAAoB,2BAA4B,KAAM,MAAO,kBAAmB,KAAM,MAAO,SAAU,KAAM,UAAW,sBAAuB,KAAM,YAAa,MAAO,KAAM,eAAgB,QAAS,KAAM,MAAO,OAAQ,KAAM,MAAO,OAAQ,KAAM,iBAAkB,YAAa,KAAM,sBAAuB,UAAW,KAAM,MAAO,qBAAsB,KAAM,KAAM,0BAA2B,KAAM,KAAM,2BAA4B,KAAM,KAAM,gBAAiB,KAAM,eAAgB,UAAW,KAAM,OAAQ,OAAQ,KAAM,QAAS,aAAc,KAAM,KAAM,YAAa,KAAM,YAAa,cAAe,KAAM,eAAgB,gBAAiB,KAAM,aAAc,iBAAkB,KAAM,aAAc,gBAAiB,KAAM,sBAAuB,MAAO,KAAM,qBAAsB,uBAAwB,MAAO,QAAS,UAAW,KAAM,SAAU,iBAAkB,KAAM,QAAS,OAAQ,MAAO,cAAe,WAAY,MAAO,2BAA4B,KAAM,uBAAwB,mBAAoB,KAAM,MAAO,qBAAsB,KAAM,MAAO,mBAAoB,MAAO,aAAc,gCAAiC,OAAQ,MAAO,qBAAsB,OAAQ,MAAO,yBAA0B,YAAa,MAAO,eAAgB,OAAQ,MAAO,sBAAuB,KAAM,MAAO,mBAAoB,KAAM,MAAO,OAAQ,KAAM,MAAO,gBAAiB,QAAS,SAAU,qBAAsB,OAAQ,MAAO,0BAA2B,oBAAqB,MAAO,kBAAmB,mBAAoB,qBAEvgDC,QAAS,2BACTC,aAAc,CAAC,KAAM,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAC5DC,QAAS,wEAETC,UAAW,CACTC,KAAM,CAAC,CACLC,QAAS,eACR,CAAC,sBAAuB,CACzBC,MAAO,CACL,YAAa,UACb,oBAAqB,kBACrB,uBAAwB,sBACxB,gBAAiB,CACfX,MAAO,WACPY,KAAM,oBAER,WAAY,MAGhB,CAAC,oCAAqC,CACpCD,MAAO,CACL,oBAAqB,sBACrB,WAAY,cAEZ,CACFD,QAAS,YACR,CACDA,QAAS,eAEX,CACEA,QAAS,YAEX,CACEA,QAAS,YACR,CAAC,aAAc,aAClB,CAAC,yEAA0E,UAAW,CAAC,WAAY,aAAc,CAC/GA,QAAS,YACR,CAAC,OAAQ,cACZG,WAAY,CAAC,CAAC,MAAO,SAAU,CAAC,WAAY,WAAY,CAAC,UAAW,YACpEC,QAAS,CAAC,CAAC,2BAA4B,gBAAiB,CAAC,gCAAiC,cAAe,CAAC,MAAO,WAEjHC,QAAS,CAAC,CAAC,IAAK,SAAU,gBAC1BC,WAAY,CAAC,CAAC,IAAK,SAAU,WAAY,CAAC,MAAO,iBAAkB,CAAC,IAAK,WAEzEC,WAAY,CAAC,CAAC,IAAK,SAAU,mBAC7BC,cAAe,CAAC,CAAC,IAAK,SAAU,WAAY,CAAC,WAAY,iBAAkB,CAAC,MAAO,yBAA0B,CAC3GR,QAAS,cACR,CAAC,IAAK,WAITS,iBAAkB,CAAC,CAAC,mBAAoB,CACtCnB,MAAO,eACPoB,SAAU,iBACR,CAAC,mBAAoB,CACvBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,mBAAoB,CACvBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,kBAAmB,CACtBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,eAAgB,CACnBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,kCAAmC,CACtCpB,MAAO,eACPoB,SAAU,mBACR,CAAC,qBAAsB,CACzBpB,MAAO,eACPoB,SAAU,mBACR,CAAC,gBAAiB,CACpBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,gBAAiB,CACpBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,gBAAiB,CACpBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,eAAgB,CACnBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,YAAa,CAChBpB,MAAO,eACPoB,SAAU,iBACR,CAAC,gCAAiC,CACpCpB,MAAO,eACPoB,SAAU,mBACR,CAAC,kBAAmB,CACtBpB,MAAO,eACPoB,SAAU,mBACR,CAAC,eAAgB,CACnBpB,MAAO,eACPoB,SAAU,kBACR,CAAC,eAAgB,CACnBpB,MAAO,eACPoB,SAAU,kBACR,CAAC,eAAgB,CACnBpB,MAAO,eACPoB,SAAU,kBACR,CAAC,cAAe,CAClBpB,MAAO,eACPoB,SAAU,kBACR,CAAC,WAAY,CACfpB,MAAO,eACPoB,SAAU,kBACR,CAAC,8BAA+B,CAClCpB,MAAO,eACPoB,SAAU,oBACR,CAAC,iBAAkB,CACrBpB,MAAO,eACPoB,SAAU,qBAMZC,QAAS,CAAC,CAAC,MAAO,iBAAkB,CAAC,IAAK,CACxCV,MAAO,CACL,UAAW,CACTX,MAAO,eACPY,KAAM,QAER,UAAW,CACTZ,MAAO,eACPY,KAAM,SAER,WAAY,aAOhBU,QAAS,CAAC,CACRZ,QAAS,cACR,CAAC,MAAO,iBAAkB,CAAC,IAAK,CACjCC,MAAO,CACL,UAAW,CACTX,MAAO,eACPY,KAAM,oBAER,UAAW,CACTZ,MAAO,eACPY,KAAM,SAER,WAAY,aAGhBW,gBAAiB,CAAC,CAAC,qBAAsB,CACvCvB,MAAO,kBACPY,KAAM,aAMRY,SAAU,CAAC,CACTd,QAAS,cACR,CACDA,QAAS,aAEXe,QAAS,CAAC,CAAC,6BAA8B,CACvCzB,MAAO,2BACPY,KAAM,qBAERc,YAAa,CAAC,CAAC,cAAe,CAC5Bf,MAAO,CACL,UAAW,CAAC,CACVX,MAAO,2BACPY,KAAM,YAER,WAAY,oBAEZ,CAAC,IAAK,mBACVe,QAAS,CAAC,CAAC,OAAQ,cAAe,iBAClCC,YAAa,CAAC,CAAC,UAAW,kBAAmB,WAAY,CAAC,IAAK,gBAC/DC,UAAW,CAAC,CAAC,QAAS,YAAa,CAAC,OAAQ,YAAa,CAAC,OAAQ","file":"43-1e6ffd09e43675997069.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n*  Copyright (c) Microsoft Corporation. All rights reserved.\n*  Licensed under the MIT License. See License.txt in the project root for license information.\n*--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '`',\n    close: '`'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.perl',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  // https://learn.perl.org/docs/keywords.html\n  // Perl syntax\n  keywords: ['__DATA__', 'else', 'lock', '__END__', 'elsif', 'lt', '__FILE__', 'eq', '__LINE__', 'exp', 'ne', 'sub', '__PACKAGE__', 'for', 'no', 'and', 'foreach', 'or', 'unless', 'cmp', 'ge', 'package', 'until', 'continue', 'gt', 'while', 'CORE', 'if', 'xor', 'do', 'le', '__DIE__', '__WARN__'],\n  // Perl functions\n  builtinFunctions: ['-A', 'END', 'length', 'setpgrp', '-B', 'endgrent', 'link', 'setpriority', '-b', 'endhostent', 'listen', 'setprotoent', '-C', 'endnetent', 'local', 'setpwent', '-c', 'endprotoent', 'localtime', 'setservent', '-d', 'endpwent', 'log', 'setsockopt', '-e', 'endservent', 'lstat', 'shift', '-f', 'eof', 'map', 'shmctl', '-g', 'eval', 'mkdir', 'shmget', '-k', 'exec', 'msgctl', 'shmread', '-l', 'exists', 'msgget', 'shmwrite', '-M', 'exit', 'msgrcv', 'shutdown', '-O', 'fcntl', 'msgsnd', 'sin', '-o', 'fileno', 'my', 'sleep', '-p', 'flock', 'next', 'socket', '-r', 'fork', 'not', 'socketpair', '-R', 'format', 'oct', 'sort', '-S', 'formline', 'open', 'splice', '-s', 'getc', 'opendir', 'split', '-T', 'getgrent', 'ord', 'sprintf', '-t', 'getgrgid', 'our', 'sqrt', '-u', 'getgrnam', 'pack', 'srand', '-w', 'gethostbyaddr', 'pipe', 'stat', '-W', 'gethostbyname', 'pop', 'state', '-X', 'gethostent', 'pos', 'study', '-x', 'getlogin', 'print', 'substr', '-z', 'getnetbyaddr', 'printf', 'symlink', 'abs', 'getnetbyname', 'prototype', 'syscall', 'accept', 'getnetent', 'push', 'sysopen', 'alarm', 'getpeername', 'quotemeta', 'sysread', 'atan2', 'getpgrp', 'rand', 'sysseek', 'AUTOLOAD', 'getppid', 'read', 'system', 'BEGIN', 'getpriority', 'readdir', 'syswrite', 'bind', 'getprotobyname', 'readline', 'tell', 'binmode', 'getprotobynumber', 'readlink', 'telldir', 'bless', 'getprotoent', 'readpipe', 'tie', 'break', 'getpwent', 'recv', 'tied', 'caller', 'getpwnam', 'redo', 'time', 'chdir', 'getpwuid', 'ref', 'times', 'CHECK', 'getservbyname', 'rename', 'truncate', 'chmod', 'getservbyport', 'require', 'uc', 'chomp', 'getservent', 'reset', 'ucfirst', 'chop', 'getsockname', 'return', 'umask', 'chown', 'getsockopt', 'reverse', 'undef', 'chr', 'glob', 'rewinddir', 'UNITCHECK', 'chroot', 'gmtime', 'rindex', 'unlink', 'close', 'goto', 'rmdir', 'unpack', 'closedir', 'grep', 'say', 'unshift', 'connect', 'hex', 'scalar', 'untie', 'cos', 'index', 'seek', 'use', 'crypt', 'INIT', 'seekdir', 'utime', 'dbmclose', 'int', 'select', 'values', 'dbmopen', 'ioctl', 'semctl', 'vec', 'defined', 'join', 'semget', 'wait', 'delete', 'keys', 'semop', 'waitpid', 'DESTROY', 'kill', 'send', 'wantarray', 'die', 'last', 'setgrent', 'warn', 'dump', 'lc', 'sethostent', 'write', 'each', 'lcfirst', 'setnetent'],\n  // File handlers\n  builtinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],\n  // Perl variables\n  builtinVariables: ['$!', '$^RE_TRIE_MAXBUF', '$LAST_REGEXP_CODE_RESULT', '$\"', '$^S', '$LIST_SEPARATOR', '$#', '$^T', '$MATCH', '$$', '$^TAINT', '$MULTILINE_MATCHING', '$%', '$^UNICODE', '$NR', '$&', '$^UTF8LOCALE', '$OFMT', \"$'\", '$^V', '$OFS', '$(', '$^W', '$ORS', '$)', '$^WARNING_BITS', '$OS_ERROR', '$*', '$^WIDE_SYSTEM_CALLS', '$OSNAME', '$+', '$^X', '$OUTPUT_AUTO_FLUSH', '$,', '$_', '$OUTPUT_FIELD_SEPARATOR', '$-', '$`', '$OUTPUT_RECORD_SEPARATOR', '$.', '$a', '$PERL_VERSION', '$/', '$ACCUMULATOR', '$PERLDB', '$0', '$ARG', '$PID', '$:', '$ARGV', '$POSTMATCH', '$;', '$b', '$PREMATCH', '$<', '$BASETIME', '$PROCESS_ID', '$=', '$CHILD_ERROR', '$PROGRAM_NAME', '$>', '$COMPILING', '$REAL_GROUP_ID', '$?', '$DEBUGGING', '$REAL_USER_ID', '$@', '$EFFECTIVE_GROUP_ID', '$RS', '$[', '$EFFECTIVE_USER_ID', '$SUBSCRIPT_SEPARATOR', '$\\\\', '$EGID', '$SUBSEP', '$]', '$ERRNO', '$SYSTEM_FD_MAX', '$^', '$EUID', '$UID', '$^A', '$EVAL_ERROR', '$WARNING', '$^C', '$EXCEPTIONS_BEING_CAUGHT', '$|', '$^CHILD_ERROR_NATIVE', '$EXECUTABLE_NAME', '$~', '$^D', '$EXTENDED_OS_ERROR', '%!', '$^E', '$FORMAT_FORMFEED', '%^H', '$^ENCODING', '$FORMAT_LINE_BREAK_CHARACTERS', '%ENV', '$^F', '$FORMAT_LINES_LEFT', '%INC', '$^H', '$FORMAT_LINES_PER_PAGE', '%OVERLOAD', '$^I', '$FORMAT_NAME', '%SIG', '$^L', '$FORMAT_PAGE_NUMBER', '@+', '$^M', '$FORMAT_TOP_NAME', '@-', '$^N', '$GID', '@_', '$^O', '$INPLACE_EDIT', '@ARGV', '$^OPEN', '$INPUT_LINE_NUMBER', '@INC', '$^P', '$INPUT_RECORD_SEPARATOR', '@LAST_MATCH_START', '$^R', '$LAST_MATCH_END', '$^RE_DEBUG_FLAGS', '$LAST_PAREN_MATCH'],\n  // operators\n  symbols: /[:+\\-\\^*$&%@=<>!?|\\/~\\.]/,\n  quoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, [/[a-zA-Z\\-_][\\w\\-_]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@builtinFunctions': 'type.identifier',\n        '@builtinFileHandlers': 'variable.predefined',\n        '@quoteLikeOps': {\n          token: '@rematch',\n          next: 'quotedConstructs'\n        },\n        '@default': ''\n      }\n    }], // Perl variables\n    [/[\\$@%][*@#?\\+\\-\\$!\\w\\\\\\^><~:;\\.]+/, {\n      cases: {\n        '@builtinVariables': 'variable.predefined',\n        '@default': 'variable'\n      }\n    }], {\n      include: '@strings'\n    }, {\n      include: '@dblStrings'\n    }, // Perl Doc\n    {\n      include: '@perldoc'\n    }, // Here Doc\n    {\n      include: '@heredoc'\n    }, [/[{}\\[\\]()]/, '@brackets'], // RegExp\n    [/[\\/](?:(?:\\[(?:\\\\]|[^\\]])+\\])|(?:\\\\\\/|[^\\]\\/]))*[\\/]\\w*\\s*(?=[).,;]|$)/, 'regexp'], [/@symbols/, 'operators'], {\n      include: '@numbers'\n    }, [/[,;]/, 'delimiter']],\n    whitespace: [[/\\s+/, 'white'], [/(^#!.*$)/, 'metatag'], [/(^#.*$)/, 'comment']],\n    numbers: [[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'], [/\\d+/, 'number']],\n    // Single quote string\n    strings: [[/'/, 'string', '@stringBody']],\n    stringBody: [[/'/, 'string', '@popall'], [/\\\\'/, 'string.escape'], [/./, 'string']],\n    // Double quote string\n    dblStrings: [[/\"/, 'string', '@dblStringBody']],\n    dblStringBody: [[/\"/, 'string', '@popall'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], {\n      include: '@variables'\n    }, [/./, 'string']],\n    // Quoted constructs\n    // Percent strings in Ruby are similar to quote-like operators in Perl.\n    // This is adapted from pstrings in ../ruby/ruby.ts.\n    quotedConstructs: [[/(q|qw|tr|y)\\s*\\(/, {\n      token: 'string.delim',\n      switchTo: '@qstring.(.)'\n    }], [/(q|qw|tr|y)\\s*\\[/, {\n      token: 'string.delim',\n      switchTo: '@qstring.[.]'\n    }], [/(q|qw|tr|y)\\s*\\{/, {\n      token: 'string.delim',\n      switchTo: '@qstring.{.}'\n    }], [/(q|qw|tr|y)\\s*</, {\n      token: 'string.delim',\n      switchTo: '@qstring.<.>'\n    }], [/(q|qw|tr|y)#/, {\n      token: 'string.delim',\n      switchTo: '@qstring.#.#'\n    }], [/(q|qw|tr|y)\\s*([^A-Za-z0-9#\\s])/, {\n      token: 'string.delim',\n      switchTo: '@qstring.$2.$2'\n    }], [/(q|qw|tr|y)\\s+(\\w)/, {\n      token: 'string.delim',\n      switchTo: '@qstring.$2.$2'\n    }], [/(qr|m|s)\\s*\\(/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.(.)'\n    }], [/(qr|m|s)\\s*\\[/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.[.]'\n    }], [/(qr|m|s)\\s*\\{/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.{.}'\n    }], [/(qr|m|s)\\s*</, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.<.>'\n    }], [/(qr|m|s)#/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.#.#'\n    }], [/(qr|m|s)\\s*([^A-Za-z0-9_#\\s])/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.$2.$2'\n    }], [/(qr|m|s)\\s+(\\w)/, {\n      token: 'regexp.delim',\n      switchTo: '@qregexp.$2.$2'\n    }], [/(qq|qx)\\s*\\(/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.(.)'\n    }], [/(qq|qx)\\s*\\[/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.[.]'\n    }], [/(qq|qx)\\s*\\{/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.{.}'\n    }], [/(qq|qx)\\s*</, {\n      token: 'string.delim',\n      switchTo: '@qqstring.<.>'\n    }], [/(qq|qx)#/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.#.#'\n    }], [/(qq|qx)\\s*([^A-Za-z0-9#\\s])/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.$2.$2'\n    }], [/(qq|qx)\\s+(\\w)/, {\n      token: 'string.delim',\n      switchTo: '@qqstring.$2.$2'\n    }]],\n    // Non-expanded quoted string\n    // qstring<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qstring: [[/\\\\./, 'string.escape'], [/./, {\n      cases: {\n        '$#==$S3': {\n          token: 'string.delim',\n          next: '@pop'\n        },\n        '$#==$S2': {\n          token: 'string.delim',\n          next: '@push'\n        },\n        '@default': 'string'\n      }\n    }]],\n    // Quoted regexp\n    // qregexp.<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qregexp: [{\n      include: '@variables'\n    }, [/\\\\./, 'regexp.escape'], [/./, {\n      cases: {\n        '$#==$S3': {\n          token: 'regexp.delim',\n          next: '@regexpModifiers'\n        },\n        '$#==$S2': {\n          token: 'regexp.delim',\n          next: '@push'\n        },\n        '@default': 'regexp'\n      }\n    }]],\n    regexpModifiers: [[/[msixpodualngcer]+/, {\n      token: 'regexp.modifier',\n      next: '@popall'\n    }]],\n    // Expanded quoted string\n    // qqstring.<open>.<close>\n    //  open = open delimiter\n    //  close = close delimiter\n    qqstring: [{\n      include: '@variables'\n    }, {\n      include: '@qstring'\n    }],\n    heredoc: [[/<<\\s*['\"`]?([\\w\\-]+)['\"`]?/, {\n      token: 'string.heredoc.delimiter',\n      next: '@heredocBody.$1'\n    }]],\n    heredocBody: [[/^([\\w\\-]+)$/, {\n      cases: {\n        '$1==$S2': [{\n          token: 'string.heredoc.delimiter',\n          next: '@popall'\n        }],\n        '@default': 'string.heredoc'\n      }\n    }], [/./, 'string.heredoc']],\n    perldoc: [[/^=\\w/, 'comment.doc', '@perldocBody']],\n    perldocBody: [[/^=cut\\b/, 'type.identifier', '@popall'], [/./, 'comment.doc']],\n    variables: [[/\\$\\w+/, 'variable'], [/@\\w+/, 'variable'], [/%\\w+/, 'variable']]\n  }\n};"],"sourceRoot":""}