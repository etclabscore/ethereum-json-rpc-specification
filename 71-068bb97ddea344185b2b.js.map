{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","language","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","object","array","multiString","multiStringContinued","next","whitespace","comment","flowCollections","flowScalars","doubleQuotedString","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"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","file":"71-068bb97ddea344185b2b.js","sourcesContent":["export var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    offSide: true\n  }\n};\nexport var language = {\n  tokenPostfix: '.yaml',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n  numberInteger: /(?:0|[+-]?[0-9]+)/,\n  numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n  numberOctal: /0o[0-7]+/,\n  numberHex: /0x[0-9a-fA-F]+/,\n  numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n  numberNaN: /\\.(?:nan|Nan|NAN)/,\n  numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n  escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Directive\n    [/%[^ ]+.*$/, 'meta.directive'], // Document Markers\n    [/---/, 'operators.directivesEnd'], [/\\.{3}/, 'operators.documentEnd'], // Block Structure Indicators\n    [/[-?:](?= )/, 'operators'], {\n      include: '@anchor'\n    }, {\n      include: '@tagHandle'\n    }, {\n      include: '@flowCollections'\n    }, {\n      include: '@blockStyle'\n    }, // Numbers\n    [/@numberInteger(?![ \\t]*\\S+)/, 'number'], [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'], [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'], [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'], [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'], [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'], [/@numberDate(?![ \\t]*\\S+)/, 'number.date'], // Key:Value pair\n    [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']], {\n      include: '@flowScalars'\n    }, // String nodes\n    [/.+$/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // Flow Collection: Flow Mapping\n    object: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Flow Mapping termination\n    [/\\}/, '@brackets', '@pop'], // Flow Mapping delimiter\n    [/,/, 'delimiter.comma'], // Flow Mapping Key:Value delimiter\n    [/:(?= )/, 'operators'], // Flow Mapping Key:Value key\n    [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'], // Start Flow Style\n    {\n      include: '@flowCollections'\n    }, {\n      include: '@flowScalars'\n    }, // Scalar Data types\n    {\n      include: '@tagHandle'\n    }, {\n      include: '@anchor'\n    }, {\n      include: '@flowNumber'\n    }, // Other value (keyword or string)\n    [/[^\\},]+/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // Flow Collection: Flow Sequence\n    array: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Flow Sequence termination\n    [/\\]/, '@brackets', '@pop'], // Flow Sequence delimiter\n    [/,/, 'delimiter.comma'], // Start Flow Style\n    {\n      include: '@flowCollections'\n    }, {\n      include: '@flowScalars'\n    }, // Scalar Data types\n    {\n      include: '@tagHandle'\n    }, {\n      include: '@anchor'\n    }, {\n      include: '@flowNumber'\n    }, // Other value (keyword or string)\n    [/[^\\],]+/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // First line of a Block Style\n    multiString: [[/^( +).+$/, 'string', '@multiStringContinued.$1']],\n    // Further lines of a Block Style\n    //   Workaround for indentation detection\n    multiStringContinued: [[/^( *).+$/, {\n      cases: {\n        '$1==$S2': 'string',\n        '@default': {\n          token: '@rematch',\n          next: '@popall'\n        }\n      }\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n    // Only line comments\n    comment: [[/#.*$/, 'comment']],\n    // Start Flow Collections\n    flowCollections: [[/\\[/, '@brackets', '@array'], [/\\{/, '@brackets', '@object']],\n    // Start Flow Scalars (quoted strings)\n    flowScalars: [[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'[^']*'/, 'string'], [/\"/, 'string', '@doubleQuotedString']],\n    doubleQuotedString: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    // Start Block Scalar\n    blockStyle: [[/[>|][0-9]*[+-]?$/, 'operators', '@multiString']],\n    // Numbers in Flow Collections (terminate with ,]})\n    flowNumber: [[/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'], [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'], [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'], [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'], [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'], [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'], [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']],\n    tagHandle: [[/\\![^ ]*/, 'tag']],\n    anchor: [[/[&*][^ ]+/, 'namespace']]\n  }\n};"],"sourceRoot":""}